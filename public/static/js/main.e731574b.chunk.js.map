{"version":3,"sources":["logo.jpg","components/LaunchItem.jsx","components/MissionKey.jsx","components/Launches.jsx","components/Launch.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","ClassNames","text-success","text-danger","dist_default","format","Link","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","classNames","client","ApolloClient","uri","App","BrowserRouter","src","logo","alt","style","width","display","margin","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uWCKzB,SAASC,EAATC,GAAoG,IAAAC,EAAAD,EAA7EE,OAAUC,EAAmEF,EAAnEE,cAAeC,EAAoDH,EAApDG,aAAcC,EAAsCJ,EAAtCI,kBAAmBC,EAAmBL,EAAnBK,eAC5F,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAW,CACrCC,eAAgBN,EAChBO,eAAgBP,KACfF,IACLG,EAAAC,EAAAC,cAAA,kBACUF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,OAAO,oBAAqBV,KAGlDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAE,WAAAC,OAAaf,GAAiBO,UAAU,qBAAhD,qBCjBL,SAASS,IACpB,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBADpB,cAGAH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBADpB,qQCDZ,IAAMU,EAAiBC,IAAHC,KAsCLC,mLA1BP,OACIhB,EAAAC,EAAAC,cAACe,EAAA,SAAD,KACIjB,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACgB,EAAA,MAAD,CAAOC,MAAON,GAEN,SAAApB,GAA8B,IAA3B2B,EAA2B3B,EAA3B2B,QAASC,EAAkB5B,EAAlB4B,MAAOC,EAAW7B,EAAX6B,KACf,OAAIF,EAAgBpB,EAAAC,EAAAC,cAAA,yBAChBmB,GAAOE,QAAQC,IAAIH,GAChBrB,EAAAC,EAAAC,cAACe,EAAA,SAAD,KAECK,EAAKG,SAASC,IAAI,SAAC/B,GACf,OAAOK,EAAAC,EAAAC,cAACV,EAAD,CAAYmC,IAAKhC,EAAOC,cAAeD,OAAQA,kBAhBvEiC,4cCXvB,IAAMC,EAAef,IAAHgB,KAiFHC,EAhEf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAJ,IAAA,SAAAe,MAAA,WACY,IACE9C,EAAkBuC,KAAKQ,MAAMC,MAAMC,OAAnCjD,cAEN,OADAA,EAAgBkD,SAASlD,GAErBI,EAAAC,EAAAC,cAACe,EAAA,SAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,MAAD,CAAOC,MAAOU,EAAckB,UAAW,CAACnD,kBAEhC,SAAAH,GAA4B,IAA1B2B,EAA0B3B,EAA1B2B,QAASC,EAAiB5B,EAAjB4B,MAAOC,EAAU7B,EAAV6B,KACd,GAAIF,EAAS,OAAOpB,EAAAC,EAAAC,cAAA,wBAChBmB,GAAOE,QAAQC,IAAIH,GAFC,IAAA2B,EASpB1B,EAAK3B,OALLE,EAJoBmD,EAIpBnD,aACAD,EALoBoD,EAKpBpD,cACAqD,EANoBD,EAMpBC,YACAlD,EAPoBiD,EAOpBjD,eAPoBmD,EAAAF,EAQpBG,OAAUC,EARUF,EAQVE,UAAWC,EARDH,EAQCG,YAAaC,EARdJ,EAQcI,YAEtC,OAAOtD,EAAAC,EAAAC,cAACe,EAAA,SAAD,KACHjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,cACEN,GAENG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBACsBP,GAEtBI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACoB8C,GAEpBjD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,uBACwBH,EAAAC,EAAAC,cAAA,QAAMC,UAAYoD,IAAW,CACjDlD,eAAiBN,EACjBO,eAAiBP,KACdA,EAAiB,MAAQ,QAGpCC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,eACkBiD,GAElBpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACoBkD,GAEpBrD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACoBmD,KAI5BtD,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAW,qBAAxB,gBApDhC4B,EAAA,CAA4BH,aCdtB4B,EAAS,IAAIC,IAAa,CAC5BC,IAAK,aAsBMC,mLAlBX,OACI3D,EAAAC,EAAAC,cAACgB,EAAA,eAAD,CAAgBsC,OAAQA,GACtBxD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,KACI5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OACI2D,IAAKC,IACLC,IAAI,SACJC,MAAO,CAAEC,MAAO,IAAKC,QAAS,QAASC,OAAQ,UAEnDnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYvD,IAClChB,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,yBAAyBC,UAAYxC,cAZrDH,aCAE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e731574b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fdaab9ad.jpg\";","import React from 'react';\nimport ClassNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem ({ launch: { flight_number, mission_name, launch_date_local, launch_success} }) {\n    return (\n        <div className=\"card card-body mb-3 bg-dark\">\n            <div className=\"row\">\n                <div className=\"col-md-9 text-white\">\n                    <h4>Mission: <span className={ClassNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                    })}>{mission_name}</span></h4>\n                    <p>\n                        Date: <Moment format=\"YYYY-MM-DD HH:mm\" >{launch_date_local}</Moment>\n                    </p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n                        Launch details\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default function MissionKey () {\n    return(\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-2 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-2 mr-2 bg-danger\" /> = Failed\n            </p>\n        </div>\n    )\n}\n","import React, {Component, Fragment} from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery{\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\nclass Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1>\n                   Launches\n                </h1>\n                <MissionKey />\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) console.log(error);\n                            return <Fragment>\n                                {\n                                    data.launches.map((launch)=>{\n                                        return <LaunchItem key={launch.flight_number} launch={launch} />\n                                    })\n                                 }\n                            </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery ($flight_number : Int!) {\n        launch(flight_number : $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component{\n    render(){\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return(\n            <Fragment>\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n                    {\n                        ({loading, error, data}) => {\n                            if (loading) return <h4>Loading...</h4>;\n                            if (error) console.log(error);\n                            const {\n                                mission_name,\n                                flight_number,\n                                launch_year,\n                                launch_success,\n                                rocket: { rocket_id, rocket_name, rocket_type }\n                            } = data.launch;\n                            return <Fragment>\n                                <div className=\"card card-body bg-dark text-white my-2\">\n                                    <h1 className=\"my-3\">\n                                        <span className=\"text-warning\">Mission : </span>\n                                        { mission_name }\n                                    </h1>\n                                    <h4 className=\"mb-3\">Launch details</h4>\n                                    <ul className=\"list-group text-dark\">\n                                        <li className=\"list-group-item\">\n                                            Flight number : { flight_number }\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch year : { launch_year }\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch successful : <span className={ classNames({\n                                            'text-success' : launch_success,\n                                            'text-danger' : !launch_success\n                                        }) }>{ launch_success ? 'Yes' : 'No' }</span>\n                                        </li>\n                                    </ul>\n                                    <h4 className=\"my-3\">Rocket details</h4>\n                                    <ul className=\"list-group text-dark\">\n                                        <li className=\"list-group-item\">\n                                            Rocket ID : { rocket_id }\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket name : { rocket_name}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket type : { rocket_type }\n                                        </li>\n                                    </ul>\n                                </div>\n                                <Link to=\"/\" className =\"btn btn-secondary\">\n                                    Back\n                                </Link>\n                                </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        );\n    }\n}\n\nexport default Launch;\n","import React, { Component } from 'react';\nimport './App.css';\nimport logo from './logo.jpg';\nimport ApolloClient from 'apollo-boost';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\nclass App extends Component {\n  render() {\n    return (\n        <ApolloProvider client={client}>\n          <Router>\n              <div className=\"container\">\n                <img\n                    src={logo}\n                    alt=\"SpaceX\"\n                    style={{ width: 300, display: 'block', margin: 'auto' }}\n                />\n                <Route exact path=\"/\" component={ Launches } />\n                <Route exact path=\"/launch/:flight_number\" component={ Launch } />\n              </div>\n          </Router>\n        </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}